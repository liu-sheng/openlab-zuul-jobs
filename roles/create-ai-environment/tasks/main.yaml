- name: Get build id
  shell: echo '{{zuul.build}}' | cut -c 1-7
  register: build_id

- name: Get IP and Credential
  shell:
    cmd: |
      set -x
      set -e

      useradd demo -p 'demo'
      echo 'demo:demo' | chpasswd
      usermod -s /bin/bash demo
      mkdir /home/demo
      chown demo:demo /home/demo
      sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
      service sshd restart

      cat > '{{ zuul.patchset }}.json' <<EOF
      {
        "ip": "{{ ansible_all_ipv4_addresses }}",
        "build_id": "{{ build_id.stdout }}"
      }
      EOF
    executable: /bin/bash

- name: Upload Environment Info to Web
  shell:
    cmd: |
      apt install -y python-pip
      pip install pygithub

      cat > 'upload_env_info.py' <<EOF
      import github
      import sys

      file_name = sys.argv[1]

      github_obj = github.Github('moo-ai', 'mooopenlab1')
      repo = github_obj.get_user().get_repo('moo-ai.github.io')
      try:
          repo.get_file_contents('env_info/{{ zuul.patchset }}.json')
      except github.UnknownObjectException:
          with open(file_name, 'rb') as env_info:
              data = env_info.read()
              repo.create_file(path='env_info/' + file_name,
                               message='Upload env info',
                               content=data,
                               branch='master')
      EOF

      python upload_env_info.py '{{ zuul.patchset }}.json'
    executable: /bin/bash


- name: Install {{ runtime.stdout }} Runtime
  when: runtime_name != ''
  shell:
    cmd: |
      set -x
      set -e

      runtime_name={{ runtime_name.stdout }}
      runtime_version={{ runtime_version.stdout }}
      add-apt-repository -y ppa:deadsnakes/ppa
      apt update
      if [ $runtime_name == 'python' ];then
        apt install -y $runtime_name$runtime_version
        apt install -y python2.7 python3.5 python3.6 python3.7
      fi

      if [ $runtime_name == 'java' ];then
        apt install -y default-jre default-jdk
        apt install -y openjdk-7-jre openjdk-8-jdk
      fi

      if [ $runtime_name == 'c' ];then
        apt install -y gcc=$runtime_version g++=$runtime_version
        apt install -y gcc-7 g++-7 gcc-8 g++-8 gcc-9 g++-9
      fi

      if [ $runtime_name == 'go' ];then
        apt install -y golang-go=$runtime_version
      fi

    executable: /bin/bash
  register: runtime_done


- name: Install {{ framework.stdout }}-{{ framework_version.stdout }}
  when:
    ( framework.stdout.find('tensorflow') and runtime_name.stdout in ['python', 'java', 'go', 'c'] ) or
    ( framework.stdout.find('pytorch') and runtime_name.stdout in ['python', 'c'] )
  shell:
    cmd: |
      set -x
      set -e
      framework={{ framework.stdout }}
      framework_version={{ framework_version.stdout }}
      runtime_name={{ runtime_name.stdout }}

      if [ $framework == "tensorflow" ];then
        if [ runtime_name == "python" ];then
          pip install tensorflow=={{ framework_version.stdout }}
        fi
        if [ runtime_name == "java" ];then
          wget https://storage.googleapis.com/tensorflow/libtensorflow_jni-cpu-linux-x86_64-{{ framework_version.stdout }}.tar.gz
          tar -xvf libtensorflow_jni-cpu-linux-x86_64-{{ framework_version.stdout }}.tar.gz
        fi
        if [ runtime_name == "go" ];then
          mkdir ./download
          export GOPATH=`pwd`/download
          apt install -y git-core
          go get github.com/tensorflow/tensorflow/tensorflow/go
          go test github.com/tensorflow/tensorflow/tensorflow/go
          git checkout tags/{{ framework_version.stdout }}

        fi
        if [ runtime_name == "c" ];then
          wget https://storage.googleapis.com/tensorflow/libtensorflow-cpu-linux-x86_64-{{ framework_version.stdout }}.tar.gz
          tar -xz libtensorflow-cpu-linux-x86_64-{{ framework_version.stdout }}.tar.gz /usr/local
          ldconfig
        fi
      fi

      if [ $framework == 'pythorch' ];then
        if [ runtime_name == "python" ];then
          pip install torch=={{ framework_version.stdout }} torchvision
        fi
        if [ runtime_name == "c" ];then
          wget https://download.pytorch.org/libtorch/cu90/libtorch-shared-with-deps-latest.zip
          apt install zip
          unzip libtorch-shared-with-deps-latest.zip
        fi
      fi

    executable: /bin/bash
    register: install_done

- name: Run Tensorflow Python Job
  when: framework.stdout == "tensorflow" and runtime_name.stdout in ["python", "java", "go", "c"]
  shell:
    cmd: |
      set -x
      set -e

      user_data_folder='{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/'
      cd $user_data_folder

      pip install tensorflow=={{ framework_version.stdout }}

      py_file={{ entrypoint.stdout }}

      result_folder="{{ ansible_user_dir }}/workspace/test_results/"

      '{{ runtime.stdout }}' $py_file | tee ${result_folder}"/process_log.txt"
    executable: /bin/bash

- name: Run PyTorch Python Job
  when: framework.stdout == "pytorch" and is_python_runtime is defined
  shell:
    cmd: |
      set -x
      set -e

      user_data_folder='{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/'
      cd $user_data_folder

      version=`cat framework_version.txt`

      pip install torch==${version} torchvision

      py_file=`cat entry_point.txt`

      result_folder="{{ ansible_user_dir }}/workspace/test_results/"

      '{{ runtime.stdout }}' $py_file | tee ${result_folder}"/process_log.txt"
    executable: /bin/bash

- name: Collect Traning or Inference Result if needed
  when: stat_ouput_folder.stat.exists and stat_ouput_folder.stat.isdir
  shell:
    cmd: |
      set -x
      set -e

      mv '{{ ansible_user_dir }}/{{ zuul.project.src_dir }}/user_data/{{ output_folder_name.stdout }}' \
        '{{ ansible_user_dir }}/workspace/test_results/'
