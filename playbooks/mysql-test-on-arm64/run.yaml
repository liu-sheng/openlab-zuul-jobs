- hosts: all
  tasks:
    - name: Set maven env vars
      set_fact:
        test_env:
          MYSQL_INSTALL_DIR: '/home/mysql-install/mysql'
          MYSQL_DATA_DIR: '/data/mysql-master/mysql'
          BOOST_DIR: '/home/zuul/boost/'
          OPTIMIZED_SRC_DIR: '/opt/'
          GOOGLE_TEST_DIR: '/opt/googletest/'

    - name: Merge maven env vars into global env
      set_fact:
        global_env: '{{ global_env | combine(test_env) }}'

    - name: Install necessary libs via apt
      become: yes
      shell:
        cmd: |
          apt-get -q update
          apt-get -q install -y --no-install-recommends build-essential autoconf automake libtool cmake \
          zlib1g-dev pkg-config libssl-dev libssl1.0.0 libsasl2-dev bats curl sudo git wget
          apt-get install libaio1 libncurses5-dev bison -y
          apt-get install libgmp-dev libmpfr-dev libmpc-dev -yadd-apt-repository ppa:deadsnakes/ppa -y
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'

    - name: Checkout Release
      shell:
        cmd: |
          git checkout tags/mysql-{{ global_env.RELEASE }} -b {{ global_env.RELEASE }}
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'
      when:
        - global_env.RELEASE != 'refs/heads/8.0'
        - global_env.IS_OPTIMIZED == 'no'

    - name: Clone optimized version
      become: yes
      shell:
        cmd: |
          git clone https://gitee.com/src-openeuler/mysql5.git
      args:
        executable: /bin/bash
        chdir: '{{ global_env.OPTIMIZED_SRC_DIR }}'
      environment: '{{ global_env }}'
      when:
        - global_env.RELEASE != 'refs/heads/8.0'
        - global_env.IS_OPTIMIZED == 'yes'

    - name: Generate boost folder
      file:
        path: "{{ global_env.BOOST_DIR }}"
        state: directory
      environment: '{{ global_env }}'

    - name: Generate googletest folder
      file:
        path: "{{ global_env.GOOGLE_TEST_DIR }}"
        state: directory
      environment: '{{ global_env }}'
      when:
        - global_env.RELEASE != 'refs/heads/8.0'
        - global_env.IS_OPTIMIZED == 'yes'

    - name: Download googletest {{ global_env.GOOGLE_TEST_VERSION }}
      shell:
        cmd: |
          wget "http://github.com/google/googletest/archive/release-{{ global_env.GOOGLE_TEST_VERSION }}.zip"
      args:
        executable: /bin/bash
        chdir: "{{ global_env.GOOGLE_TEST_DIR }}"
      environment: '{{ global_env }}'
      when:
        - global_env.RELEASE != 'refs/heads/8.0'
        - global_env.IS_OPTIMIZED == 'yes'

    - name: Generate Mysql data dir
      become: yes
      file:
        path: "{{ global_env.MYSQL_DATA_DIR }}"
        state: directory
      environment: '{{ global_env }}'

    - name: Generate log result folder
      file:
        path: "{{ ansible_user_dir }}/workspace/test_results/"
        state: directory

    - name: Prepare boost for mysql {{ global_env.RELEASE }}
      shell:
        cmd: |
          wget "http://sourceforge.net/projects/boost/files/boost/{{ global_env.BOOST_VERSION }}/boost_{{ BOOST_VERSION.split('.') | join('_') }}.tar.gz"
      args:
        executable: /bin/bash
        chdir: "{{ global_env.BOOST_DIR }}"
      environment: '{{ global_env }}'

    - name: Compile and install Mysql {{ global_env.RELEASE }}
      become: true
      shell:
        cmd: |
          cmake . -DCMAKE_INSTALL_PREFIX={{ global_env.MYSQL_INSTALL_DIR }} \
          -DMYSQL_DATADIR={{ global_env.MYSQL_DATA_DIR }} \
          -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 \
          -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
          -DWITH_MYISAM_STORAGE_ENGINE=1 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DDEFAULT_CHARSET=utf8mb4 \
          -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DCMAKE_C_COMPILER=/usr/bin/gcc \
          -DDOWNLOAD_BOOST=1 -DWITH_BOOST={{ global_env.BOOST_DIR }} -DFORCE_INSOURCE_BUILD=1 && \
          make -j8 && \
          make install
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'
      when:
        - global_env.IS_OPTIMIZED == 'no'

    - name: Compile and install Mysql {{ global_env.RELEASE }}
      become: true
      shell:
        cmd: |
          cmake . -DCMAKE_INSTALL_PREFIX={{ global_env.MYSQL_INSTALL_DIR }} \
          -DMYSQL_DATADIR={{ global_env.MYSQL_DATA_DIR }} \
          -DSYSCONFDIR=/etc -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 \
          -DWITH_FEDERATED_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 \
          -DWITH_MYISAM_STORAGE_ENGINE=1 -DENABLED_LOCAL_INFILE=1 -DENABLE_DTRACE=0 -DDEFAULT_CHARSET=utf8mb4 \
          -DDEFAULT_COLLATION=utf8mb4_general_ci -DWITH_EMBEDDED_SERVER=1 -DCMAKE_C_COMPILER=/usr/bin/gcc \
          -DENABLE_DOWNLOADS=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST={{ global_env.BOOST_DIR }} -DFORCE_INSOURCE_BUILD=1 \
          -DLOCAL_GMOCK_ZIP={{ global_env.GOOGLE_TEST_DIR }}/release-{{ global_env.GOOGLE_TEST_VERSION }}.zip && \
          make -j8 && \
          make install
      args:
        executable: /bin/bash
        chdir: '{{ global_env.OPTIMIZED_SRC_DIR }}/mysql5/mysql-5.7.27/'
      environment: '{{ global_env }}'
      when:
        - global_env.IS_OPTIMIZED == 'yes'

    - name: Run Unittest for Mysql {{ global_env.RELEASE }}
      become: true
      shell:
        cmd: |
          set -xo pipefail
          make test-unit | tee "{{ ansible_user_dir }}/workspace/test_results/unittest.log"
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}/unittest'
      environment: '{{ global_env }}'
      when:
        - global_env.IS_OPTIMIZED == 'no'

    - name: Run Unittest for Mysql {{ global_env.RELEASE }}
      become: true
      shell:
        cmd: |
          set -xo pipefail
          make test-unit | tee "{{ ansible_user_dir }}/workspace/test_results/unittest.log"
      args:
        executable: /bin/bash
        chdir: '{{ global_env.OPTIMIZED_SRC_DIR }}/mysql5/mysql-5.7.27/unittest'
      environment: '{{ global_env }}'
      when:
        - global_env.IS_OPTIMIZED == 'yes'

    - name: Run MTR test for Mysql {{ global_env.RELEASE }}
      become: true
      shell:
        cmd: |
          set -xo pipefail
          ./mtr --retry-failure=3 --max-test-fail 999 --force | tee "{{ ansible_user_dir }}/workspace/test_results/mtr-test.log"
      args:
        executable: /bin/bash
        chdir: '{{ global_env.MYSQL_INSTALL_DIR }}/mysql-test/'
      environment: '{{ global_env }}'
