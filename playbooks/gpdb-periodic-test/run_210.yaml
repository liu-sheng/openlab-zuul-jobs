- hosts: all
  tasks:
    - name: Set maven env vars
      set_fact:
        test_env:
          RELEASE: v2.1.0
          BAZEL_VERSION: 0.29.1
          GCC_VERSION: 7.5.0

    - name: Merge maven env vars into global env
      set_fact:
        global_env: '{{ global_env | combine(test_env) }}'

    - name: Install the necessary libraries via apt
      become: true
      shell: |
        apt update && \
        apt install -y build-essential \
        openjdk-8-jdk \
        python \
        zip \
        unzip \
        gcc \
        python3 \
        python3-dev \
        python3-pip \
        libhdf5-serial-dev \
        git \
        pkg-config \
        wget \
        sudo
      args:
        executable: /bin/bash

    - name: Checkout Release
      shell:
        cmd: |
          cd
          release={{ global_env.RELEASE }}
          prefix=${release#v}
          wget https://github.com/tensorflow/tensorflow/archive/${release}.tar.gz
          tar -xvf ${release}.tar.gz
          mv tensorflow-${prefix} tensorflow
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'
      when:
        global_env.RELEASE in ["v2.0.0", "v2.1.0"]

    - name: Install higher version cmake 3.5.2 and gcc {{ global_env.GCC_VERSION }}
      become: true
      shell: |
        set -ex
        apt update && \
        apt install libgmp-dev libmpfr-dev libmpc-dev -y
        cd /opt && \
        wget https://cmake.org/files/v3.5/cmake-3.5.2.tar.gz && \
        tar -zxvf cmake-3.5.2.tar.gz && \
        cd cmake-3.5.2 && \
        ./bootstrap && \
        make && \
        make install && \
        cmake --version && \
        which cmake
        cd /opt && \
        wget https://mirrors.tuna.tsinghua.edu.cn/gnu/gcc/gcc-{{ global_env.GCC_VERSION }}/gcc-{{ global_env.GCC_VERSION }}.tar.gz && \
        tar -xvf gcc-{{ global_env.GCC_VERSION }}.tar.gz && \
        cd gcc-{{ global_env.GCC_VERSION }} && \
        ./configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --enable-bootstrap && \
        make -j8 && \
        make install && \
        gcc -v && \
        which gcc
      args:
        executable: /bin/bash
      environment: '{{ global_env }}'
      when:
        global_env.GCC_VERSION not in ["7.3.0"]

    - name: Install bazel {{ global_env.BAZEL_VERSION }}
      become: true
      shell: |
        set -ex
        cd /opt/
        wget https://github.com/bazelbuild/bazel/releases/download/{{ global_env.BAZEL_VERSION }}/bazel-{{ global_env.BAZEL_VERSION }}-dist.zip
        mkdir bazel
        unzip bazel-{{ global_env.BAZEL_VERSION }}-dist.zip -d bazel
        cd bazel
        EXTRA_BAZEL_ARGS='--host_javabase=@local_jdk//:jdk' ./compile.sh
        ln -s `pwd`/output/bazel /usr/bin/bazel
        which bazel
      args:
        executable: /bin/bash
      environment: '{{ global_env }}'

    - name: Install pip deps on system cmd
      become: true
      shell: |
        pip3 install virtualenv
      args:
        executable: /bin/bash

    - name: Install pip deps via user account
      shell: |
        pip3 install cython
        pip3 install numpy future keras_preprocessing mock
      args:
        executable: /bin/bash

    - name: Build Tensorflow {{ global_env.RELEASE }}
      shell: |
        set -xe
        virtualenv --python=python3.6 ~/.env/tensorflow/
        source ~/.env/tensorflow/bin/activate
        release={{ global_env.RELEASE }}
        if [ $release != 'master' ]; then
            cd ~/tensorflow
        else
            cd ~
            git clone https://github.com/tensorflow/tensorflow.git
            cd tensorflow
        fi
        sudo apt install tcl tk expect -y
        cat << EOF > input
        #!/usr/bin/expect
        spawn "./configure"
        expect "*Please specify the location of python*"
        send "/usr/bin/python3\r"
        expect "*Please input the desired Python library path to use*"
        send "\r"
        expect "*Do you wish to build TensorFlow with XLA JIT support*"
        send "n\r"
        expect "*Do you wish to build TensorFlow with OpenCL SYCL support*"
        send "n\r"
        expect "*Do you wish to build TensorFlow with ROCm support*"
        send "n\r"
        expect "*Do you wish to build TensorFlow with CUDA support*"
        send "n\r"
        expect "*Do you wish to download a fresh release of clang*"
        send "n\r"
        expect "*Please specify optimization flags to use during compilation when bazel option*"
        send "\r"
        expect "*Would you like to interactively configure*"
        send "n\r"
        interact
        EOF
        sudo chmod +x ./input
        ./input
        pip3 install numpy keras_preprocessing
        bazel clean --expunge
        bazel build --config=opt //tensorflow/tools/pip_package:build_pip_package \
        --local_ram_resources=10240 --local_cpu_resources=4 --verbose_failures
        mkdir tensorflow-pkg
        bazel-bin/tensorflow/tools/pip_package/build_pip_package ./tensorflow-pkg
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'

    - name: Verify Tensorflow whl package
      shell: |
        set -xe
        cd ~/tensorflow/tensorflow-pkg
        sudo apt install build-essential gcc libhdf5-serial-dev pkg-config -y
        pip3 install cython numpy keras_preprocessing
        sudo apt install libblas-dev liblapack-dev gfortran -y
        pip3 install tensorflow-*.whl
        python3 -c "import tensorflow as tf; print(tf.__version__)"
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'

    - name: Verify Tensorflow with MNIST test
      shell: |
        set -ex
        cd ~/tensorflow/tensorflow-pkg
        export MPLLOCALFREETYPE=1
        sudo apt install -y libpng12-dev
        pip3 install matplotlib tensorflow_datasets
        wget https://raw.githubusercontent.com/bzhaoopenstack/dockertoy/master/tests/ai/examples/test_mnist.py
        python3 ./test_mnist.py
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'

    - name: Copy the built file
      shell:
        cmd: |
          cd ~/tensorflow/
          mkdir -p "{{ ansible_user_dir }}/workspace/test_results/"
          cp tensorflow-pkg/tensorflow-*.whl "{{ ansible_user_dir }}/workspace/test_results/"
      args:
        executable: /bin/bash
        chdir: '{{ zuul.project.src_dir }}'
      environment: '{{ global_env }}'

    - name: Get whl file name
      find:
        paths: "{{ ansible_user_dir }}/workspace/test_results/"
        patterns: 'tensorflow-*.whl'
      register: file_name_matched

    - name: Set whl file name
      set_fact:
        whl_file_name: "{{ file_name_matched.files[0].path.split('/')[-1] }}"

    - name: Return artifact to Zuul
      zuul_return:
        data:
          zuul:
            artifacts:
              - name: "whl file download"
                url: "test_results/{{ whl_file_name }}"
